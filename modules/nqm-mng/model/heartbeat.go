package model

import (
	"database/sql/driver"
	"fmt"
	"net"

	owlGin "github.com/Cepave/open-falcon-backend/common/gin"
	ojson "github.com/Cepave/open-falcon-backend/common/json"
	"github.com/gin-gonic/gin"
)

type FalconAgentHeartbeat struct {
	Hostname      string `json:"hostname" conform:"trim"`
	IP            string `json:"ip" conform:"trim"`
	AgentVersion  string `json:"agent_version" conform:"trim"`
	PluginVersion string `json:"plugin_version" conform:"trim"`
	UpdateTime    int64  `json:"update_time" conform:"trim"`
}

type FalconAgentHeartbeatResult struct {
	RowsAffected int64 `json:"rows_affected"`
}

type NqmAgentHeartbeatRequest struct {
	// The connection id of the NQM agent
	ConnectionId string `json:"connection_id"`
	// The hostname of the machine running NQM agent
	Hostname string `json:"hostname"`
	// The IP address of the NQM agent. It supports both IPv4 and IPv6 format
	//IpAddress IPString `json:"ip_address"`
	IpAddress ojson.IP `json:"ip_address"`
	// The timestamp generated by hbs
	Timestamp ojson.JsonTime `json:"timestamp"`
}

func (r *NqmAgentHeartbeatRequest) Bind(c *gin.Context) {
	owlGin.BindJson(c, r)
}

type IPString string

func (s IPString) Value() (driver.Value, error) {
	ip := net.ParseIP(string(s))
	if ip == nil {
		return nil, fmt.Errorf("Cannot parse IP string: %s\n", s)
	}

	// If ip is not an IPv4 address, To4 returns nil.
	if v4 := ip.To4(); v4 != nil {
		return []byte(v4), nil
	}
	// ip must be IPv6 address
	return []byte(ip.To16()), nil
}
