package db

import (
	"database/sql/driver"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/ginkgo/extensions/table"
	. "github.com/onsi/gomega"
)

var _ = Describe("Tests the interfaces of database/... for Bytes16", func() {
	DescribeTable("Tests Scan() function",
		func(source interface{}, expectedValue Bytes16) {
			testedValue := new(Bytes16)

			Expect(testedValue.Scan(source)).To(Succeed())
			Expect(*testedValue).To(Equal(expectedValue))
		},
		Entry(
			"Source is []byte", []byte{
				0x62, 0x15, 0x37, 0x82, 0x5d, 0x63, 0x81, 0x97, 0x1e, 0xa4, 0x31, 0x85, 0x52, 0xbc, 0xb8, 0x8d,
			},
			[16]byte{
				0x62, 0x15, 0x37, 0x82, 0x5d, 0x63, 0x81, 0x97, 0x1e, 0xa4, 0x31, 0x85, 0x52, 0xbc, 0xb8, 0x8d,
			},
		),
		Entry(
			"Source is string", "3092be4652efd115647cbe0e187da4b9",
			[16]byte{
				0x30, 0x92, 0xbe, 0x46, 0x52, 0xef, 0xd1, 0x15, 0x64, 0x7c, 0xbe, 0x0e, 0x18, 0x7d, 0xa4, 0xb9,
			},
		),
		Entry(
			"Source is nil", nil, nil,
		),
	)

	DescribeTable("Tests Value() function",
		func(source interface{}, expected interface{}) {
			srcBytes16 := source.(Bytes16)
			value, err := srcBytes16.Value()

			Expect(err).To(Succeed())
			Expect(value).To(Equal(expected))
		},
		Entry("Source is viable",
			Bytes16{
				0x23, 0x0d, 0xda, 0x6c, 0x42, 0xe9, 0x1f, 0x27, 0x2a, 0xe7, 0xd5, 0xa1, 0xe3, 0xbb, 0x00, 0x12,
			},
			[]byte{
				0x23, 0x0d, 0xda, 0x6c, 0x42, 0xe9, 0x1f, 0x27, 0x2a, 0xe7, 0xd5, 0xa1, 0xe3, 0xbb, 0x00, 0x12,
			},
		),
		Entry("Source is nil",
			Bytes16{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			}, driver.Null{},
		),
	)
})
